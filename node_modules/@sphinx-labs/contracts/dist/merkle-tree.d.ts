export declare enum SphinxLeafType {
    APPROVE = 0,
    EXECUTE = 1,
    CANCEL = 2
}
export type SphinxLeaf = {
    chainId: bigint;
    index: bigint;
    leafType: SphinxLeafType;
    data: string;
};
export type SphinxLeafWithProof = {
    leaf: SphinxLeaf;
    proof: string[];
};
export type DeploymentData = Record<string, NetworkDeploymentData | NetworkCancellationData>;
type BaseNetworkData = {
    nonce: string;
    executor: string;
    safeProxy: string;
    moduleProxy: string;
    uri: string;
};
export type NetworkDeploymentData = BaseNetworkData & {
    type: 'deployment';
    arbitraryChain: boolean;
    txs: SphinxTransaction[];
};
export type NetworkCancellationData = BaseNetworkData & {
    type: 'cancellation';
    merkleRootToCancel: string;
};
export declare enum Operation {
    Call = 0,
    DelegateCall = 1
}
export type SphinxTransaction = {
    to: string;
    value: string;
    txData: string;
    gas: string;
    operation: Operation;
    requireSuccess: boolean;
};
export interface SphinxMerkleTree {
    root: string;
    leavesWithProofs: SphinxLeafWithProof[];
}
export declare const makeSphinxLeaves: (deploymentData: DeploymentData) => Array<SphinxLeaf>;
export declare const isBaseNetworkData: (networkData: BaseNetworkData) => boolean;
export declare const isNetworkDeploymentData: (networkData: NetworkDeploymentData | NetworkCancellationData) => networkData is NetworkDeploymentData;
export declare const isNetworkCancellationData: (networkData: NetworkDeploymentData | NetworkCancellationData) => networkData is NetworkCancellationData;
export declare const makeSphinxMerkleTreeFromLeaves: (leaves: SphinxLeaf[]) => SphinxMerkleTree;
export declare const makeSphinxMerkleTree: (deploymentData: DeploymentData) => SphinxMerkleTree;
export {};

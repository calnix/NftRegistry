"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSystemContractInfo = exports.getSphinxConstants = exports.additionalSystemContractsToVerify = exports.SystemContractType = void 0;
const ethers_1 = require("ethers");
const ifaces_1 = require("./ifaces");
const addresses_1 = require("./addresses");
const constants_1 = require("./constants");
const utils_1 = require("./utils");
var SystemContractType;
(function (SystemContractType) {
    SystemContractType[SystemContractType["SPHINX"] = 0] = "SPHINX";
    SystemContractType[SystemContractType["OPTIMISM"] = 1] = "OPTIMISM";
    SystemContractType[SystemContractType["GNOSIS_SAFE"] = 2] = "GNOSIS_SAFE";
})(SystemContractType = exports.SystemContractType || (exports.SystemContractType = {}));
exports.additionalSystemContractsToVerify = [
    {
        artifact: ifaces_1.SphinxModuleArtifact,
        expectedAddress: (0, addresses_1.getSphinxModuleImplAddress)(),
        constructorArgs: [],
        type: SystemContractType.SPHINX,
    },
];
const getSphinxConstants = () => {
    const contractInfo = [
        {
            artifact: ifaces_1.ManagedServiceArtifact,
            expectedAddress: (0, addresses_1.getManagedServiceAddress)(),
            constructorArgs: [(0, constants_1.getOwnerAddress)()],
            type: SystemContractType.SPHINX,
        },
        {
            artifact: ifaces_1.SphinxModuleProxyFactoryArtifact,
            expectedAddress: (0, addresses_1.getSphinxModuleProxyFactoryAddress)(),
            constructorArgs: [],
            type: SystemContractType.SPHINX,
        },
        {
            artifact: ifaces_1.SimulateTxAccessorArtifact,
            expectedAddress: (0, addresses_1.getSimulateTxAccessorAddress)(),
            constructorArgs: [],
            type: SystemContractType.GNOSIS_SAFE,
        },
        {
            artifact: ifaces_1.GnosisSafeProxyFactoryArtifact,
            expectedAddress: (0, addresses_1.getGnosisSafeProxyFactoryAddress)(),
            constructorArgs: [],
            type: SystemContractType.GNOSIS_SAFE,
        },
        {
            artifact: ifaces_1.DefaultCallbackHandlerArtifact,
            expectedAddress: (0, addresses_1.getDefaultCallbackHandlerAddress)(),
            constructorArgs: [],
            type: SystemContractType.GNOSIS_SAFE,
        },
        {
            artifact: ifaces_1.CompatibilityFallbackHandlerArtifact,
            expectedAddress: (0, addresses_1.getCompatibilityFallbackHandlerAddress)(),
            constructorArgs: [],
            type: SystemContractType.GNOSIS_SAFE,
        },
        {
            artifact: ifaces_1.CreateCallArtifact,
            expectedAddress: (0, addresses_1.getCreateCallAddress)(),
            constructorArgs: [],
            type: SystemContractType.GNOSIS_SAFE,
        },
        {
            artifact: ifaces_1.MultiSendArtifact,
            expectedAddress: (0, addresses_1.getMultiSendAddress)(),
            constructorArgs: [],
            type: SystemContractType.GNOSIS_SAFE,
        },
        {
            artifact: ifaces_1.MultiSendCallOnlyArtifact,
            expectedAddress: (0, addresses_1.getMultiSendCallOnlyAddress)(),
            constructorArgs: [],
            type: SystemContractType.GNOSIS_SAFE,
        },
        {
            artifact: ifaces_1.SignMessageLibArtifact,
            expectedAddress: (0, addresses_1.getSignMessageLibAddress)(),
            constructorArgs: [],
            type: SystemContractType.GNOSIS_SAFE,
        },
        {
            artifact: ifaces_1.GnosisSafeL2Artifact,
            expectedAddress: (0, addresses_1.getGnosisSafeL2Address)(),
            constructorArgs: [],
            type: SystemContractType.GNOSIS_SAFE,
        },
        {
            artifact: ifaces_1.GnosisSafeArtifact,
            expectedAddress: (0, addresses_1.getGnosisSafeSingletonAddress)(),
            constructorArgs: [],
            type: SystemContractType.GNOSIS_SAFE,
        },
        {
            artifact: ifaces_1.DrippieArtifact,
            expectedAddress: (0, addresses_1.getDrippieAddress)(),
            constructorArgs: [(0, constants_1.getOwnerAddress)()],
            type: SystemContractType.OPTIMISM,
        },
        {
            artifact: ifaces_1.CheckBalanceLowArtifact,
            expectedAddress: (0, addresses_1.getCheckBalanceLowAddress)(),
            constructorArgs: [],
            type: SystemContractType.OPTIMISM,
        },
    ];
    return contractInfo;
};
exports.getSphinxConstants = getSphinxConstants;
const getSystemContractInfo = () => {
    return (0, exports.getSphinxConstants)().map(({ artifact, constructorArgs, expectedAddress }) => {
        const { abi, bytecode } = artifact;
        const iface = new ethers_1.ethers.Interface(abi);
        const initCodeWithArgs = bytecode.concat((0, utils_1.remove0x)(iface.encodeDeploy(constructorArgs)));
        return { initCodeWithArgs, expectedAddress };
    });
};
exports.getSystemContractInfo = getSystemContractInfo;
//# sourceMappingURL=contract-info.js.map
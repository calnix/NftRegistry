import { DeployedContractSize, ParsedAccountAccess } from './types';
export declare const calculateActionLeafGasForMoonbeam: (foundryGas: string, deployedContractSizes: DeployedContractSize[], access: ParsedAccountAccess) => string;
export type ExplorerName = 'Blockscout' | 'Etherscan';
export type BlockExplorers = {
    etherscan?: {
        apiURL: string;
        browserURL: string;
        envKey: string;
    };
    blockscout?: {
        apiURL: string;
        browserURL: string;
        envKey: string;
        selfHosted: boolean;
    };
};
export type SupportedNetwork = {
    name: string;
    displayName: string;
    chainId: bigint;
    rpcUrl: () => string;
    blockexplorers: BlockExplorers;
    currency: string;
    dripSize: string;
    requiredEnvVariables: Array<string>;
    networkType: NetworkType;
    dripVersion: number;
    decimals: number;
    queryFilterBlockLimit: number;
    legacyTx: boolean;
    actionGasLimitBuffer: boolean;
    useHigherMaxGasLimit: boolean;
    eip2028: boolean;
    rollupStack?: {
        provider: RollupProvider;
        type: RollupType;
    };
    handleNetworkSpecificMerkleLeafGas?: (foundryGas: string, deployedContractSizes: DeployedContractSize[], access: ParsedAccountAccess) => string;
};
export type SupportedLocalNetwork = {
    name: string;
    chainId: bigint;
    networkType: NetworkType;
    legacyTx: false;
    actionGasLimitBuffer: false;
    useHigherMaxGasLimit: false;
    eip2028: true;
    dripSize: string;
    currency: string;
};
export declare const SPHINX_LOCAL_NETWORKS: Array<SupportedLocalNetwork>;
export type NetworkType = 'Testnet' | 'Mainnet' | 'Local';
type RollupProvider = 'Conduit' | 'Caldera';
type RollupType = 'OP Stack' | 'Arbitrum';
export declare const SPHINX_NETWORKS: Array<SupportedNetwork>;
export {};

"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.trackImportProxy = exports.trackExportProxy = exports.trackListProjects = exports.trackCancel = exports.trackDeployed = exports.trackApproved = exports.trackProposed = exports.trackRegistrationFinalized = exports.trackExecuted = void 0;
const Amplitude = __importStar(require("@amplitude/node"));
const amplitudeClient = Amplitude.init('acfe6e9a8c6c31ba8c644ffdc6da375d');
const disableAnalytics = process.env.DISABLE_ANALYTICS === 'true';
const timeout = (prom, time) => {
    let timer;
    return Promise.race([
        prom,
        new Promise((_r, rej) => (timer = setTimeout(rej, time))),
    ]).finally(() => clearTimeout(timer));
};
const trackExecuted = async (user_id, networkName, integration) => {
    if (disableAnalytics) {
        return;
    }
    await timeout(await amplitudeClient.logEvent({
        event_type: 'sphinx executed',
        user_id,
        event_properties: {
            network: networkName,
            integration,
        },
    }), 10000);
};
exports.trackExecuted = trackExecuted;
const trackRegistrationFinalized = async (user_id, networkName, integration) => {
    if (disableAnalytics) {
        return;
    }
    await timeout(await amplitudeClient.logEvent({
        event_type: 'sphinx registration finalized',
        user_id,
        event_properties: {
            network: networkName,
            integration,
        },
    }), 10000);
};
exports.trackRegistrationFinalized = trackRegistrationFinalized;
const trackProposed = async (user_id, integration) => {
    if (disableAnalytics) {
        return;
    }
    timeout(await amplitudeClient.logEvent({
        event_type: 'sphinx propose',
        user_id,
        event_properties: {
            integration,
        },
    }), 10000);
};
exports.trackProposed = trackProposed;
const trackApproved = async (user_id, networkName, integration) => {
    if (disableAnalytics) {
        return;
    }
    timeout(await amplitudeClient.logEvent({
        event_type: 'sphinx approve',
        user_id,
        event_properties: {
            network: networkName,
            integration,
        },
    }), 10000);
};
exports.trackApproved = trackApproved;
const trackDeployed = async (user_id, networkName, integration) => {
    if (disableAnalytics) {
        return;
    }
    timeout(await amplitudeClient.logEvent({
        event_type: 'sphinx deploy',
        user_id,
        event_properties: {
            network: networkName,
            integration,
        },
    }), 10000);
};
exports.trackDeployed = trackDeployed;
const trackCancel = async (user_id, networkName, integration) => {
    if (disableAnalytics) {
        return;
    }
    timeout(await amplitudeClient.logEvent({
        event_type: 'sphinx cancel',
        user_id,
        event_properties: {
            network: networkName,
            integration,
        },
    }), 10000);
};
exports.trackCancel = trackCancel;
const trackListProjects = async (user_id, networkName, integration) => {
    if (disableAnalytics) {
        return;
    }
    timeout(await amplitudeClient.logEvent({
        event_type: 'sphinx list projects',
        user_id,
        event_properties: {
            network: networkName,
            integration,
        },
    }), 10000);
};
exports.trackListProjects = trackListProjects;
const trackExportProxy = async (user_id, networkName, integration) => {
    if (disableAnalytics) {
        return;
    }
    timeout(await amplitudeClient.logEvent({
        event_type: 'sphinx export proxy',
        user_id,
        event_properties: {
            network: networkName,
            integration,
        },
    }), 10000);
};
exports.trackExportProxy = trackExportProxy;
const trackImportProxy = async (user_id, networkName, integration) => {
    if (disableAnalytics) {
        return;
    }
    timeout(await amplitudeClient.logEvent({
        event_type: 'sphinx import proxy',
        user_id,
        event_properties: {
            network: networkName,
            integration,
        },
    }), 10000);
};
exports.trackImportProxy = trackImportProxy;
//# sourceMappingURL=analytics.js.map
import { ethers } from 'ethers';
import { CompilerInput, ContractDeploymentArtifact, SphinxTransactionReceipt, SphinxTransactionResponse, ExecutionArtifact } from './languages/solidity/types';
import { SphinxJsonRpcProvider } from './provider';
import { DeploymentConfig, ConfigArtifacts, NetworkConfig, BuildInfos } from './config/types';
import { ExecutionMode } from './constants';
export type NetworkArtifacts = {
    executionArtifacts: {
        [txArtifactFileName: string]: ExecutionArtifact;
    };
    contractDeploymentArtifacts: {
        [contractFileName: string]: ContractDeploymentArtifact;
    };
};
export type DeploymentArtifacts = {
    networks: {
        [chainId: string]: NetworkArtifacts;
    };
    compilerInputs: {
        [fileName: string]: CompilerInput;
    };
};
export declare const fetchDeploymentArtifacts: (apiKey: string, orgId: string, projectName: string) => Promise<DeploymentArtifacts>;
export declare const convertEthersTransactionResponse: (response: ethers.TransactionResponse | null, chainId: string) => SphinxTransactionResponse;
export declare const isSphinxTransactionResponse: (response: any) => response is SphinxTransactionResponse;
export declare const isSphinxTransactionReceipt: (receipt: any) => receipt is SphinxTransactionReceipt;
export declare const convertEthersTransactionReceipt: (receipt: ethers.TransactionReceipt | null) => SphinxTransactionReceipt;
export declare const makeContractDeploymentArtifacts: (merkleRoot: string, networkConfig: NetworkConfig, buildInfos: BuildInfos, receipts: Array<SphinxTransactionReceipt>, configArtifacts: ConfigArtifacts, artifacts: {
    [fileName: string]: ContractDeploymentArtifact | undefined;
}, provider: SphinxJsonRpcProvider) => Promise<void>;
export declare const writeDeploymentArtifacts: (projectName: string, executionMode: ExecutionMode, deploymentArtifacts: DeploymentArtifacts) => void;
export declare const isContractDeploymentArtifactExceptHistory: (item: any) => item is ContractDeploymentArtifact;
export declare const isContractDeploymentArtifact: (obj: any) => obj is ContractDeploymentArtifact;
export declare const makeDeploymentArtifacts: (deployments: {
    [chainId: string]: {
        deploymentConfig: DeploymentConfig;
        receipts: Array<SphinxTransactionReceipt>;
        provider: SphinxJsonRpcProvider;
    };
}, merkleRoot: string, configArtifacts: ConfigArtifacts, artifacts: DeploymentArtifacts) => Promise<void>;
export declare const isExecutionArtifact: (obj: any) => obj is ExecutionArtifact;
export declare const isReceiptEarlier: (receipt1: SphinxTransactionReceipt, receipt2: SphinxTransactionReceipt) => boolean;
export declare const getCompilerInputDirName: (executionMode: ExecutionMode) => string;

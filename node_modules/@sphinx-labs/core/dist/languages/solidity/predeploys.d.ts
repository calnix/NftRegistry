import { Contract, ethers } from 'ethers';
import { HardhatEthersProvider } from '@nomicfoundation/hardhat-ethers/internal/hardhat-ethers-provider';
import ora from 'ora';
import { SphinxJsonRpcProvider } from '../../provider';
import { ExecutionMode } from '../../constants';
export declare const ensureSphinxAndGnosisSafeDeployed: (provider: SphinxJsonRpcProvider | HardhatEthersProvider, wallet: ethers.Wallet, executionMode: ExecutionMode, includeManagedServiceRoles: boolean, relayers?: string[], spinner?: ora.Ora) => Promise<void>;
export declare const cancelPreviousDripVersions: (Drippie: Contract, provider: SphinxJsonRpcProvider | HardhatEthersProvider, wallet: ethers.Signer, executionMode: ExecutionMode, dripName: string, currentDripVersion: number, spinner?: ora.Ora) => Promise<void>;
export declare const checkSystemDeployed: (provider: SphinxJsonRpcProvider | HardhatEthersProvider) => Promise<boolean>;
export declare const assignManagedServiceRoles: (provider: SphinxJsonRpcProvider | HardhatEthersProvider, signer: ethers.Signer, relayers: string[], executionMode: ExecutionMode, spinner?: ora.Ora) => Promise<void>;
export declare const deploySphinxSystem: (provider: SphinxJsonRpcProvider | HardhatEthersProvider, signer: ethers.Signer, relayers: string[], executionMode: ExecutionMode, includeManagedServiceRoles: boolean, spinner?: ora.Ora) => Promise<void>;
export declare const getDeterministicFactoryAddress: (provider: SphinxJsonRpcProvider | HardhatEthersProvider) => Promise<string>;
export declare const doDeterministicDeploy: (provider: SphinxJsonRpcProvider | HardhatEthersProvider, executionMode: ExecutionMode, options: {
    contract: {
        abi: any;
        bytecode: string;
    };
    salt: string;
    signer: ethers.Signer;
    args?: any[];
}) => Promise<ethers.Contract>;

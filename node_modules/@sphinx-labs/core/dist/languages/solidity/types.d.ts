import { CompilerOutputMetadata, LinkReferences, SphinxTransaction } from '@sphinx-labs/contracts';
import { ExecutionMode } from '../../constants';
export type ExecutionArtifact = {
    _format: 'sphinx-sol-execution-artifact-1';
    transactions: Array<{
        response: SphinxTransactionResponse;
        receipt: SphinxTransactionReceipt;
    }>;
    merkleRoot: string;
    solcInputHashes: Array<string>;
    safeAddress: string;
    moduleAddress: string;
    executorAddress: string;
    nonce: string;
    chainId: string;
    actions: Array<SphinxTransaction>;
    sphinxConfig: {
        projectName: string;
        orgId: string;
        owners: Array<string>;
        mainnets: Array<string>;
        testnets: Array<string>;
        threshold: string;
        saltNonce: string;
    };
    executionMode: ExecutionMode;
    initialState: {
        isSafeDeployed: boolean;
        isModuleDeployed: boolean;
        isExecuting: boolean;
    };
    unlabeledContracts: Array<{
        address: string;
        initCodeWithArgs: string;
    }>;
    arbitraryChain: boolean;
    libraries: Array<string>;
    gitCommit: string | null;
    safeInitData: string | null;
};
export type SphinxTransactionResponse = {
    accessList: Array<{
        address: string;
        storageKeys: Array<string>;
    }> | null;
    blockNumber: number;
    blockHash: string;
    chainId: string;
    data: string;
    from: string;
    gasLimit: string;
    gasPrice: string;
    hash: string;
    maxFeePerGas: string | null;
    maxPriorityFeePerGas: string | null;
    nonce: number;
    signature: {
        networkV: string | null;
        r: string;
        s: string;
        v: 27 | 28;
    };
    to: string;
    type: number;
    value: string;
};
export type ContractDeploymentArtifact = {
    _format: 'sphinx-sol-ct-artifact-1';
    merkleRoot: string;
    address: string;
    sourceName: string;
    contractName: string;
    chainId: string;
    receipt: SphinxTransactionReceipt;
    args: Array<any>;
    solcInputHash: string;
    abi: Array<any>;
    bytecode: string;
    deployedBytecode: string;
    linkReferences: LinkReferences;
    deployedLinkReferences: LinkReferences;
    history: Array<Omit<ContractDeploymentArtifact, 'history'>>;
    metadata: string;
    gitCommit: string | null;
    devdoc?: any;
    userdoc?: any;
};
export type SphinxTransactionReceipt = {
    blockHash: string;
    blockNumber: number;
    contractAddress: null;
    cumulativeGasUsed: string;
    from: string;
    gasPrice: string;
    gasUsed: string;
    hash: string;
    index: number;
    logs: Array<{
        address: string;
        blockHash: string;
        blockNumber: number;
        data: string;
        index: number;
        topics: Array<string>;
        transactionHash: string;
        transactionIndex: number;
    }>;
    logsBloom: string;
    status: number | null;
    to: string;
};
export type CompilerInput = {
    id: string;
    solcVersion: string;
    solcLongVersion: string;
    input: SolcInput;
};
export interface StorageSlotSegment {
    key: string;
    offset: number;
    val: string;
}
export type BuildInfo = {
    id: string;
    solcVersion: string;
    solcLongVersion: string;
    input: SolcInput;
    output: CompilerOutput;
};
export interface SolcInput {
    language: string;
    sources: {
        [sourceName: string]: {
            content: string;
        };
    };
    settings: {
        viaIR?: boolean;
        optimizer: {
            runs?: number;
            enabled?: boolean;
            details?: {
                yulDetails: {
                    optimizerSteps: string;
                };
            };
        };
        metadata?: {
            useLiteralContent: boolean;
            bytecodeHash: string;
            appendCBOR: boolean;
        };
        outputSelection: {
            [sourceName: string]: {
                [contractName: string]: string[];
            };
        };
        evmVersion?: string;
        libraries?: {
            [libraryFileName: string]: {
                [libraryName: string]: string;
            };
        };
        remappings?: string[];
    };
}
export interface CompilerOutputContract {
    abi: Array<any>;
    evm: {
        bytecode: CompilerOutputBytecode;
        deployedBytecode: CompilerOutputBytecode;
    };
    metadata: string | CompilerOutputMetadata;
}
export interface CompilerOutputContracts {
    [sourceName: string]: {
        [contractName: string]: CompilerOutputContract;
    };
}
export interface CompilerOutput {
    contracts: CompilerOutputContracts;
}
export interface CompilerOutputBytecode {
    object: string;
    linkReferences: {
        [sourceName: string]: {
            [libraryName: string]: Array<{
                start: number;
                length: 20;
            }>;
        };
    };
    immutableReferences?: {
        [key: string]: Array<{
            start: number;
            length: number;
        }>;
    };
}
export type SphinxSystemConfig = {
    relayers: string[];
};

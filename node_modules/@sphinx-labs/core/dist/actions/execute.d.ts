import { Logger } from '@eth-optimism/common-ts';
import { HardhatEthersProvider } from '@nomicfoundation/hardhat-ethers/internal/hardhat-ethers-provider';
import { SphinxLeafWithProof } from '@sphinx-labs/contracts';
import ora from 'ora';
import { TransactionReceipt, ethers } from 'ethers';
import { DeploymentConfig, NetworkConfig } from '../config';
import { ApproveDeployment, EstimateGas, ExecuteActions, HumanReadableAction, HumanReadableActions } from './types';
import { ExecutionMode } from '../constants';
import { SphinxJsonRpcProvider } from '../provider';
import { SphinxTransactionReceipt } from '../languages';
export type TreeSigner = {
    signer: string;
    signature: string;
};
export type Deployment = {
    id: string;
    multichainDeploymentId: string;
    projectId: string;
    chainId: string;
    status: 'approved' | 'cancelled' | 'executed' | 'verified' | 'verification_unsupported' | 'failed';
    safeAddress: string;
    moduleAddress: string;
    deploymentConfig: DeploymentConfig;
    networkName: string;
    treeSigners: Array<TreeSigner>;
};
export type HandleError = (e: any, deployment: Deployment) => Promise<void>;
export type ThrowError = (message: string, deploymentId: string, networkName: string) => Promise<void>;
export type HandleAlreadyExecutedDeployment = (deploymentContext: DeploymentContext, networkConfig: NetworkConfig) => Promise<void>;
export type HandleExecutionFailure = (deploymentContext: DeploymentContext, networkConfig: NetworkConfig, failureAction: HumanReadableAction | undefined) => Promise<void>;
export type HandleSuccess = (deploymentContext: DeploymentContext, networkConfig: NetworkConfig) => Promise<void>;
export type MinimumTransaction = {
    to: string;
    chainId: string;
    data: string;
    gasLimit?: string;
    value?: string;
};
export type ExecuteTransaction = (deploymentContext: DeploymentContext, transaction: MinimumTransaction, executionMode: ExecutionMode, minimumActionsGasLimit?: number) => Promise<TransactionReceipt>;
export type InjectRoles = (deploymentContext: DeploymentContext, executionMode: ExecutionMode) => Promise<void>;
export type RemoveRoles = (deploymentContext: DeploymentContext, networkConfig: NetworkConfig, executionMode: ExecutionMode) => Promise<void>;
export type DeploymentContext = {
    throwError: ThrowError;
    handleError: HandleError;
    handleAlreadyExecutedDeployment: HandleAlreadyExecutedDeployment;
    handleExecutionFailure: HandleExecutionFailure;
    handleSuccess: HandleSuccess;
    executeTransaction: ExecuteTransaction;
    injectRoles: InjectRoles;
    removeRoles: RemoveRoles;
    deployment: Deployment;
    provider: SphinxJsonRpcProvider | HardhatEthersProvider;
    wallet?: ethers.Wallet;
    logger?: Logger;
    spinner?: ora.Ora;
};
export declare const executeBatchActions: (leavesOnNetwork: SphinxLeafWithProof[], sphinxModuleReadOnly: ethers.Contract, blockGasLimit: bigint, humanReadableActions: HumanReadableActions, executionMode: ExecutionMode, executeActions: ExecuteActions, estimateGas: EstimateGas, deploymentContext: DeploymentContext) => Promise<{
    status: bigint;
    executionReceipts: ethers.TransactionReceipt[];
    batches: SphinxLeafWithProof[][];
    failureAction?: HumanReadableAction | undefined;
}>;
export declare const isExecutable: (selected: SphinxLeafWithProof[], maxGasLimit: bigint, moduleAddress: string, estimateGas: EstimateGas, chainid: bigint) => boolean;
export declare const approveDeploymentViaSigner: ApproveDeployment;
export declare const executeTransactionViaSigner: ExecuteTransaction;
export declare const injectRoles: InjectRoles;
export declare const removeRoles: RemoveRoles;
export declare const approveDeploymentViaManagedService: ApproveDeployment;
export declare const executeActionsViaManagedService: ExecuteActions;
export declare const executeActionsViaSigner: ExecuteActions;
export declare const estimateGasViaManagedService: EstimateGas;
export declare const estimateGasViaSigner: EstimateGas;
export declare const handleStatus: (status: bigint, batches: SphinxLeafWithProof[][], receipts: ethers.TransactionReceipt[], failureAction: HumanReadableAction | undefined, spinner?: ora.Ora) => {
    receipts: TransactionReceipt[];
    batches: SphinxLeafWithProof[][];
    finalStatus: bigint;
    failureAction: HumanReadableAction | undefined;
} | {
    receipts: TransactionReceipt[];
    batches: SphinxLeafWithProof[][];
    finalStatus: bigint;
    failureAction?: undefined;
};
export declare const sortSigners: (arr: Array<TreeSigner>) => void;
export declare const fetchExecutionTransactionReceipts: (receipts: ethers.TransactionReceipt[], moduleAddress: string, merkleRoot: string, provider: SphinxJsonRpcProvider | HardhatEthersProvider) => Promise<TransactionReceipt[]>;
export declare const attemptDeployment: (deploymentContext: DeploymentContext) => Promise<{
    receipts: SphinxTransactionReceipt[];
    batches: SphinxLeafWithProof[][];
    finalStatus: BigInt;
    failureAction: HumanReadableAction | undefined;
} | undefined>;
export declare const sphinxCoreExecute: {
    attemptDeployment: (deploymentContext: DeploymentContext) => Promise<{
        receipts: SphinxTransactionReceipt[];
        batches: SphinxLeafWithProof[][];
        finalStatus: BigInt;
        failureAction: HumanReadableAction | undefined;
    } | undefined>;
};

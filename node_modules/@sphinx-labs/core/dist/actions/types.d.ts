import { ethers } from 'ethers';
import { SphinxLeafWithProof } from '@sphinx-labs/contracts';
import { SphinxPreview } from '../preview';
import { ExecutionMode } from '../constants';
import { DeploymentContext } from './execute';
export declare const MerkleRootStatus: {
    EMPTY: bigint;
    APPROVED: bigint;
    COMPLETED: bigint;
    CANCELED: bigint;
    FAILED: bigint;
};
export interface RawSphinxAction {
    actionType: bigint;
    index: bigint;
    data: string;
}
export interface SphinxTarget {
    addr: string;
    implementation: string;
    contractKindHash: string;
}
export interface SetStorageAction {
    index: number;
    to: string;
    contractKindHash: string;
    key: string;
    offset: number;
    value: string;
}
export interface DeployContractAction {
    index: number;
    salt: string;
    creationCodeWithConstructorArgs: string;
}
export interface CallAction {
    index: number;
    to: string;
    data: string;
}
export interface CreateAction {
    index: number;
    initCode: string;
}
export type SphinxAction = SetStorageAction | DeployContractAction | CallAction | CreateAction;
export type HumanReadableAction = {
    reason: string;
    actionIndex: string;
};
export type HumanReadableActions = {
    [chainId: number]: Array<HumanReadableAction>;
};
export type ParsedContractDeployment = {
    address: string;
    fullyQualifiedName: string;
    initCodeWithArgs: string;
};
export type MerkleRootState = {
    numLeaves: bigint;
    leavesExecuted: bigint;
    uri: string;
    executor: string;
    status: bigint;
};
export type ContractInfo = {
    referenceName: string;
    addr: string;
};
export type EstimateGasTransactionData = {
    to: string | null;
    from: string;
    data: string;
    gasLimit: string;
    gasPrice: string;
    value: string;
    chainId: string;
};
export type TransactionEstimatedGas = {
    transaction: EstimateGasTransactionData;
    estimatedGas: string;
};
export type NetworkGasEstimate = {
    chainId: number;
    estimatedGas: string;
    fundsRequested?: string;
    transactions?: Array<TransactionEstimatedGas>;
};
export type ProposalRequest = {
    apiKey: string;
    orgId: string;
    isTestnet: boolean;
    owners: string[];
    threshold: number;
    safeAddress: string;
    moduleAddress: string;
    safeInitData: string;
    safeInitSaltNonce: string;
    deploymentName: string;
    chainIds: Array<number>;
    projectDeployments: Array<ProjectDeployment>;
    gasEstimates: Array<NetworkGasEstimate>;
    diff: SphinxPreview;
    compilerConfigId: string | undefined;
    deploymentConfigId: string | undefined;
    tree: {
        root: string;
        chainStatus: Array<{
            numLeaves: number;
            chainId: number;
        }>;
    };
};
export type ProjectDeployment = {
    chainId: number;
    deploymentId: string;
    name: string;
    isExecuting: boolean;
};
export type EstimateGas = (moduleAddress: string, batch: Array<SphinxLeafWithProof>, chainId: bigint) => number;
export type ExecuteActions = (batch: SphinxLeafWithProof[], executionMode: ExecutionMode, blockGasLimit: bigint, deploymentContext: DeploymentContext) => Promise<ethers.TransactionReceipt | null>;
export type ApproveDeployment = (merkleRoot: string, approvalLeafWithProof: SphinxLeafWithProof, executionMode: ExecutionMode, ownerSignatures: Array<string>, deploymentContext: DeploymentContext) => Promise<ethers.TransactionReceipt>;

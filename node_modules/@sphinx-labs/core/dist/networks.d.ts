import { DeployedContractSize, ParsedAccountAccess } from '@sphinx-labs/contracts';
import { ExplorerName } from '@sphinx-labs/contracts/dist/networks';
export type SupportedLocalNetworkName = 'anvil';
export declare const COMPILER_CONFIG_VERSION = "0.2.0";
export type LocalNetworkMetadata = {
    clientVersion: string;
    chainId: number;
    instanceId: string;
    latestBlockNumber: number;
    latestBlockHash: string;
    forkedNetwork?: {
        chainId: number;
        forkBlockNumber: number;
        forkBlockHash: string;
    } | null;
    snapshots?: Record<string, unknown>;
};
export declare const networkEnumToName: (networkEnum: bigint | string | number) => string;
export declare const fetchChainIdForNetwork: (networkName: string) => bigint;
export declare const fetchNameForNetwork: (chainId: bigint) => string;
export declare const isSupportedTestNetwork: (chainId: bigint) => boolean;
export declare const isSupportedProductionNetwork: (chainId: bigint) => boolean;
export declare const fetchDripSizeForNetwork: (chainId: bigint) => string;
export declare const fetchDecimalsForNetwork: (chainId: bigint) => number;
export declare const fetchDripVersionForNetwork: (chainId: bigint) => number;
export declare const calculateMerkleLeafGas: (chainId: bigint, foundryGas: string, deployedContractSizes: DeployedContractSize[], access: ParsedAccountAccess) => string;
export declare const isEtherscanSupportedForNetwork: (chainId: bigint, mockSphinxNetworks?: any) => boolean;
export declare const isBlockscoutSupportedForNetwork: (chainId: bigint, mockSphinxNetworks?: any) => boolean;
export declare const isVerificationSupportedForNetwork: (chainId: bigint, mockSphinxNetworks?: any) => boolean;
export declare const fetchEtherscanConfigForNetwork: (chainId: bigint, explorerName?: ExplorerName, mockSphinxNetworks?: any) => {
    apiURL: string;
    browserURL: string;
    envKey: string;
} | undefined;
export declare const fetchCurrencyForNetwork: (chainId: bigint) => string;
export declare const isLiveNetworkRpcApiKeyDefined: (chainId: bigint) => boolean;
export declare const fetchURLForNetwork: (chainId: bigint) => string;
export declare const isLegacyTransactionsRequiredForNetwork: (chainId: bigint) => boolean;
export declare const shouldBufferExecuteActionsGasLimit: (chainId: bigint) => boolean;
export declare const implementsEIP2028: (chainId: bigint) => boolean;
export declare const shouldUseHigherMaxGasLimit: (chainId: bigint) => boolean;
export declare const getLargestPossibleReorg: (chainIdStr: string) => bigint;

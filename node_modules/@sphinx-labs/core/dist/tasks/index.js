"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeDeploymentData = exports.makeDeploymentConfig = void 0;
const dotenv = __importStar(require("dotenv"));
const languages_1 = require("../languages");
const networks_1 = require("../networks");
dotenv.config();
const makeDeploymentConfig = (networkConfigs, configArtifacts, buildInfos, merkleTree) => {
    const sphinxInputs = [];
    for (const networkConfig of networkConfigs) {
        for (const actionInput of networkConfig.actionInputs) {
            for (const { fullyQualifiedName } of actionInput.contracts) {
                const { buildInfoId, artifact } = configArtifacts[fullyQualifiedName];
                const buildInfo = buildInfos[buildInfoId];
                if (!buildInfos[buildInfoId] || !artifact) {
                    throw new Error(`Could not find artifact for: ${fullyQualifiedName}`);
                }
                const prevSphinxInput = sphinxInputs.find((input) => input.id === buildInfo.id);
                const { language, settings, sources } = (0, languages_1.getMinimumCompilerInput)(buildInfo.input, artifact.metadata);
                if (prevSphinxInput === undefined) {
                    const sphinxInput = {
                        solcVersion: buildInfo.solcVersion,
                        solcLongVersion: buildInfo.solcLongVersion,
                        id: buildInfo.id,
                        input: {
                            language,
                            settings,
                            sources,
                        },
                    };
                    sphinxInputs.push(sphinxInput);
                }
                else {
                    prevSphinxInput.input.sources = {
                        ...prevSphinxInput.input.sources,
                        ...sources,
                    };
                }
            }
        }
    }
    return {
        networkConfigs,
        buildInfos,
        inputs: sphinxInputs,
        version: networks_1.COMPILER_CONFIG_VERSION,
        merkleTree,
        configArtifacts,
    };
};
exports.makeDeploymentConfig = makeDeploymentConfig;
const makeDeploymentData = (networkConfigArray) => {
    const data = {};
    for (const deploymentConfig of networkConfigArray) {
        if (deploymentConfig.actionInputs.length === 0) {
            continue;
        }
        const txs = deploymentConfig.actionInputs.map((action) => {
            return {
                to: action.to,
                value: action.value,
                gas: action.gas,
                txData: action.txData,
                operation: action.operation,
                requireSuccess: action.requireSuccess,
            };
        });
        data[deploymentConfig.chainId] = {
            type: 'deployment',
            nonce: deploymentConfig.nonce,
            executor: deploymentConfig.executorAddress,
            safeProxy: deploymentConfig.safeAddress,
            moduleProxy: deploymentConfig.moduleAddress,
            uri: '',
            txs,
            arbitraryChain: deploymentConfig.arbitraryChain,
        };
    }
    return data;
};
exports.makeDeploymentData = makeDeploymentData;
//# sourceMappingURL=index.js.map
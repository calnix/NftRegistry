/// <reference types="node" />
/// <reference types="mocha" />
/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import { exec } from 'child_process';
import { ethers, Provider } from 'ethers';
import { HardhatEthersProvider } from '@nomicfoundation/hardhat-ethers/internal/hardhat-ethers-provider';
import { SphinxLeaf, SphinxMerkleTree, SphinxTransaction, SphinxLeafWithProof, SphinxLeafType, SolidityStorageLayout, LinkReferences } from '@sphinx-labs/contracts';
import { DeploymentConfig, UserContractKind, ParsedVariable, ActionInput, NetworkConfig, Create2ActionInput, CreateActionInput } from './config/types';
import { HumanReadableAction } from './actions/types';
import { ExecutionMode } from './constants';
import { SphinxJsonRpcProvider } from './provider';
import { BuildInfo } from './languages/solidity/types';
import { RelayProposal, StoreDeploymentConfig } from './types';
import { NetworkArtifacts } from './artifacts';
export declare const sphinxLog: (logLevel: "error" | "warning" | undefined, title: string, lines: string[], silent: boolean, stream: NodeJS.WritableStream) => void;
export declare const createSphinxLog: (logLevel: "error" | "warning" | undefined, title: string, lines: string[]) => string;
export declare const isContractDeployed: (address: string, provider: Provider) => Promise<boolean>;
export declare const formatEther: (amount: bigint, decimals: number) => string;
export declare const getEIP1967ProxyImplementationAddress: (provider: Provider, proxyAddress: string) => Promise<string>;
export declare const getEIP1967ProxyAdminAddress: (provider: Provider, proxyAddress: string) => Promise<string>;
export declare const getGasPriceOverrides: (provider: SphinxJsonRpcProvider | HardhatEthersProvider, signer: ethers.Signer, executionMode: ExecutionMode, overridden?: ethers.TransactionRequest) => Promise<ethers.TransactionRequest>;
export declare const isUserContractKind: (contractKind: string) => contractKind is UserContractKind;
export declare const readBuildInfo: (buildInfoPath: string) => BuildInfo;
export declare const callWithTimeout: <T>(promise: Promise<T>, timeout: number, errorMessage: string) => Promise<T>;
export declare const isDataHexString: (variable: any) => boolean;
export declare const isLiveNetwork: (provider: SphinxJsonRpcProvider | HardhatEthersProvider) => Promise<boolean>;
export declare const isFork: (provider: SphinxJsonRpcProvider | HardhatEthersProvider) => Promise<boolean>;
export declare const getImpersonatedSigner: (address: string, provider: SphinxJsonRpcProvider | HardhatEthersProvider) => Promise<ethers.Signer>;
export declare const stopImpersonatingAccount: (address: string, provider: SphinxJsonRpcProvider | HardhatEthersProvider) => Promise<void>;
export declare const execAsync: typeof exec.__promisify__;
export declare const getDuplicateElements: (arr: Array<string>) => Array<string>;
export declare const fetchSphinxManagedBaseUrl: () => string;
export declare const relayProposal: RelayProposal;
export declare const storeDeploymentConfig: StoreDeploymentConfig;
export declare const arraysEqual: (a: Array<ParsedVariable>, b: Array<ParsedVariable>) => boolean;
export declare const userConfirmation: (question: string) => Promise<void>;
export declare const getNetworkNameDirectory: (chainId: string, executionMode: ExecutionMode) => string;
export declare const getNetworkTag: (networkName: string, executionMode: ExecutionMode, chainId: bigint) => string;
export declare const isEventLog: (event: ethers.EventLog | ethers.Log) => event is ethers.EventLog;
export declare const sortHexStrings: (arr: Array<string>) => Array<string>;
export declare const fromHexString: (inp: Buffer | string) => Buffer;
export declare const toHexString: (inp: Buffer | string | number) => string;
export declare const sleep: (ms: number) => Promise<void>;
export declare const isSupportedChainId: (chainId: bigint) => boolean;
export declare const isSupportedNetworkName: (networkName: string) => boolean;
export declare const prettyFunctionCall: (referenceNameOrAddress: string, address: string, functionName: string, variables: ParsedVariable, chainId: string, value?: string, spaceToIndentVariables?: number, spaceToIndentClosingParenthesis?: number) => string;
export declare const prettyRawFunctionCall: (to: string, data: string) => string;
export declare const equal: (a: ParsedVariable, b: ParsedVariable) => boolean;
export declare const elementsEqual: (ary: Array<ParsedVariable>) => boolean;
export declare const displayDeploymentTable: (networkConfig: NetworkConfig) => void;
export declare const spawnAsync: (cmd: string, args: string[], env?: NodeJS.ProcessEnv, inputData?: string) => Promise<{
    stdout: string;
    stderr: string;
    code: number | null;
}>;
export declare const isString: (str: string | null | undefined) => str is string;
export declare const toSphinxTransaction: (actionInput: ActionInput) => SphinxTransaction;
export declare const getSphinxWalletsSortedByAddress: (numWallets: number | bigint, provider: SphinxJsonRpcProvider | HardhatEthersProvider) => Array<ethers.Wallet>;
export declare const getSphinxWalletPrivateKey: (walletIndex: number) => string;
export declare const addSphinxWalletsToGnosisSafeOwners: (safeAddress: string, moduleAddress: string, executionMode: ExecutionMode, provider: SphinxJsonRpcProvider | HardhatEthersProvider) => Promise<void>;
export declare const removeSphinxWalletsFromGnosisSafeOwners: (sphinxWallets: Array<ethers.Wallet>, safeAddress: string, moduleAddress: string, executionMode: ExecutionMode, provider: SphinxJsonRpcProvider | HardhatEthersProvider) => Promise<void>;
export declare const removeGnosisSafeOwnerViaSphinxModule: (prevOwner: string, owner: string, ownerThreshold: number, safe: ethers.Contract, executionMode: ExecutionMode, moduleSigner: ethers.Signer, provider: SphinxJsonRpcProvider | HardhatEthersProvider) => Promise<void>;
export declare const getApproveLeaf: (merkleTree: SphinxMerkleTree, chainId: bigint) => SphinxLeaf;
export declare const getExecuteLeaves: (merkleTree: SphinxMerkleTree, chainId: bigint) => Array<SphinxLeaf>;
export declare const findLeafWithProof: (merkleTree: SphinxMerkleTree, leafType: SphinxLeafType, chainId: bigint) => SphinxLeafWithProof;
export declare const stringifyLeafType: (leafType: SphinxLeafType) => string;
export declare const stringifyMerkleRootStatus: (status: bigint) => string;
export declare const findStorageSlotKey: (storageLayout: SolidityStorageLayout | undefined, varName: string) => string;
export declare const assertValidProjectName: (input: string) => void;
export declare const isSphinxTransaction: (obj: any) => obj is SphinxTransaction;
export declare const signMerkleRoot: (merkleRoot: string, wallet: ethers.Signer) => Promise<string>;
export declare const fundAccountMaxBalance: (address: string, provider: SphinxJsonRpcProvider | HardhatEthersProvider) => Promise<void>;
export declare const setBalance: (address: string, balance: string, provider: SphinxJsonRpcProvider | HardhatEthersProvider) => Promise<void>;
export declare const getMappingValueSlotKey: (mappingSlotKey: string, key: string) => string;
export declare const setManagedServiceRelayer: (address: string, provider: HardhatEthersProvider | SphinxJsonRpcProvider) => Promise<void>;
export declare const getReadableActions: (actionInputs: ActionInput[], chainId: string) => HumanReadableAction[];
export declare const getCreate3Address: (deployer: string, salt: string) => string;
export declare const toSphinxLeafWithProofArray: (input: Array<{
    leaf: {
        chainId: string | bigint;
        index: string | bigint;
        leafType: SphinxLeafType;
        data: string;
    };
    proof: string[];
}>) => Array<SphinxLeafWithProof>;
export declare const getCreate3Salt: (referenceName: string, userSalt: string) => string;
export declare const getMaxGasLimit: (blockGasLimit: bigint, chainId: bigint) => bigint;
export declare const formatSolcLongVersion: (solcLongVersion: string) => string;
export declare const stripLeadingZero: (hexString: string) => string;
export declare const getBytesLength: (hexString: string) => number;
export declare const zeroOutLibraryReferences: (bytecode: string, linkReferences: LinkReferences) => string;
export declare const isDefined: <T>(value: T | undefined) => value is T;
export declare const getAbiEncodedConstructorArgs: (initCodeWithArgs: string, artifactBytecode: string) => string;
export declare const decodeCall: (iface: ethers.Interface, data: string) => {
    functionName: string;
    variables: ParsedVariable;
} | undefined;
export declare const encodeCreateCall: (value: string, initCodeWithArgs: string) => string;
export declare const decodeDeterministicDeploymentProxyData: (saltAndInitCodeWithArgs: string) => {
    salt: string;
    initCodeWithArgs: string;
    create2Address: string;
};
export declare const isCreate2ActionInput: (action: ActionInput) => action is Create2ActionInput;
export declare const isCreateActionInput: (action: ActionInput) => action is CreateActionInput;
export declare const isFile: (path: string) => boolean;
export declare const isNormalizedAddress: (addr: string) => boolean;
export declare const fetchNetworkConfigFromDeploymentConfig: (chainId: bigint, deploymentConfig: DeploymentConfig) => NetworkConfig;
export declare const readDeploymentArtifactsForNetwork: (projectName: string, chainId: BigInt, executionMode: ExecutionMode) => NetworkArtifacts;
export declare const isArrayMixed: <T>(arr: T[]) => boolean;
export declare const getContractAddressesFromNetworkConfig: (networkConfig: NetworkConfig) => Array<string>;
export declare const hasParentheses: (str: string) => boolean;
export declare const trimQuotes: (str: string) => string;
export declare const isPublicAsyncMethod: (obj: any, prop: string | symbol) => boolean;
export declare const sphinxCoreUtils: {
    sleep: (ms: number) => Promise<void>;
    callWithTimeout: <T>(promise: Promise<T>, timeout: number, errorMessage: string) => Promise<T>;
    isPublicAsyncMethod: (obj: any, prop: string | symbol) => boolean;
};

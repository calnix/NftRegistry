"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleInstall = void 0;
const child_process_1 = require("child_process");
const contracts_1 = require("@sphinx-labs/contracts");
const core_1 = require("@sphinx-labs/core");
const installWithUpdate = async (spinner) => {
    spinner.start('Installing Sphinx Solidity library...');
    const args = [
        'install',
        `sphinx-labs/sphinx@${contracts_1.CONTRACTS_LIBRARY_VERSION}`,
        '--no-commit',
    ];
    const submoduleStatus = await (0, core_1.spawnAsync)('git', ['submodule', 'status']);
    if (submoduleStatus.code !== 0) {
        console.log(submoduleStatus.stdout);
        console.log(submoduleStatus.stderr);
        process.exit(1);
    }
    if (submoduleStatus.stdout.includes('lib/sphinx')) {
        const installExistingDeps = await (0, core_1.spawnAsync)('forge', ['install']);
        if (installExistingDeps.code !== 0) {
            console.log(installExistingDeps.stdout);
            console.log(installExistingDeps.stderr);
            process.exit(1);
        }
        const update = await (0, core_1.spawnAsync)('forge', ['update', 'sphinx-labs/sphinx']);
        if (update.code !== 0) {
            console.log(update.stdout);
            console.log(update.stderr);
            process.exit(1);
        }
        const install = await (0, core_1.spawnAsync)('forge', args);
        if (install.code !== 0) {
            console.log(install.stdout);
            console.log(install.stderr);
            process.exit(1);
        }
    }
    else {
        const install = await (0, core_1.spawnAsync)('forge', args);
        if (install.code !== 0) {
            console.log(install.stdout);
            console.log(install.stderr);
            process.exit(1);
        }
    }
};
const handleInstall = async (spinner) => {
    await installWithUpdate(spinner);
    (0, child_process_1.execSync)('cd lib/sphinx/packages/contracts && forge install --no-commit && cd ../../ && git restore packages/contracts/foundry.toml', { stdio: 'ignore' });
    spinner.succeed('Successfully installed Sphinx Solidity library');
};
exports.handleInstall = handleInstall;
//# sourceMappingURL=index.js.map
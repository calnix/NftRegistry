import { SphinxTransactionReceipt, ExecutionMode, DeploymentConfig, NetworkConfig, SphinxTransactionResponse } from '@sphinx-labs/core';
import { ethers } from 'ethers';
import { HardhatEthersProvider } from '@nomicfoundation/hardhat-ethers/internal/hardhat-ethers-provider';
export type SimulationTransactions = Array<{
    receipt: SphinxTransactionReceipt;
    response: SphinxTransactionResponse;
}>;
export declare const simulationConstants: {
    maxAttempts: number;
    timeout: number;
};
export type simulateDeploymentSubtaskArgs = {
    deploymentConfig: DeploymentConfig;
    chainId: string;
};
export declare const simulate: (deploymentConfig: DeploymentConfig, chainId: string, rpcUrl: string) => Promise<{
    transactions: SimulationTransactions;
}>;
export declare const setupPresimulationState: (provider: any, executionMode: ExecutionMode) => Promise<ethers.Wallet>;
export declare const fetchTransactionResponses: (receipts: Array<SphinxTransactionReceipt>, provider: HardhatEthersProvider) => Promise<SimulationTransactions>;
export declare const simulateDeploymentSubtask: (taskArgs: simulateDeploymentSubtaskArgs, hre: any) => Promise<{
    transactions: SimulationTransactions;
}>;
export declare const handleSimulationSuccess: (networkConfig: NetworkConfig, provider: HardhatEthersProvider) => Promise<void>;
export declare const createHardhatEthersProviderProxy: (ethersProvider: HardhatEthersProvider) => HardhatEthersProvider;
export declare const getUndeployedContractErrorMesage: (address: string) => string;

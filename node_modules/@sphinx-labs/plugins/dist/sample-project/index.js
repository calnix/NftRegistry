"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.init = exports.sampleTestFileName = exports.sampleScriptFileName = exports.sampleContractFileName = void 0;
__exportStar(require("./sample-contracts"), exports);
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const ora_1 = __importDefault(require("ora"));
const ethers_1 = require("ethers");
const core_1 = require("@sphinx-labs/core");
const sample_foundry_config_1 = require("./sample-foundry-config");
const sample_contracts_1 = require("./sample-contracts");
const install_1 = require("../cli/install");
exports.sampleContractFileName = 'HelloSphinx.sol';
exports.sampleScriptFileName = 'HelloSphinx.s.sol';
exports.sampleTestFileName = 'HelloSphinx.t.sol';
const handleGitInit = async () => {
    if (process.env.SPHINX_INTERNAL_TEST__DEMO_TEST === 'true') {
        return;
    }
    const spawnOutput = await (0, core_1.spawnAsync)('git', ['init']);
    if (spawnOutput.code !== 0) {
        console.log(spawnOutput.stdout);
        console.log(spawnOutput.stderr);
        process.exit(1);
    }
};
const handleCommit = async () => {
    if (process.env.SPHINX_INTERNAL_TEST__DEMO_TEST === 'true') {
        return;
    }
    const gitAddOutput = await (0, core_1.spawnAsync)('git', ['add', '.']);
    if (gitAddOutput.code !== 0) {
        console.log(gitAddOutput.stdout);
        console.log(gitAddOutput.stderr);
        process.exit(1);
    }
    const gitCommitOutput = await (0, core_1.spawnAsync)('git', [
        'commit',
        '-m',
        '"feat: Initialized Sphinx"',
    ]);
    if (gitCommitOutput.code !== 0) {
        console.log(gitCommitOutput.stdout);
        console.log(gitCommitOutput.stderr);
        process.exit(1);
    }
};
const init = async (orgId, sphinxApiKey, alchemyApiKey, rawOwnerAddress) => {
    const spinner = (0, ora_1.default)();
    spinner.start(`Initializing sample Sphinx project...`);
    await handleGitInit();
    const contractDirPath = 'src';
    const testDirPath = 'test';
    const scriptDirPath = 'script';
    const owner = ethers_1.ethers.getAddress(rawOwnerAddress);
    if (!fs.existsSync(scriptDirPath)) {
        fs.mkdirSync(scriptDirPath);
    }
    if (!fs.existsSync(contractDirPath)) {
        fs.mkdirSync(contractDirPath);
    }
    if (!fs.existsSync(testDirPath)) {
        fs.mkdirSync(testDirPath);
    }
    const scriptPath = path.join(scriptDirPath, exports.sampleScriptFileName);
    fs.writeFileSync(scriptPath, (0, sample_contracts_1.getSampleScriptFile)(owner, orgId, scriptDirPath, contractDirPath));
    const contractFilePath = path.join(contractDirPath, exports.sampleContractFileName);
    fs.writeFileSync(contractFilePath, (0, sample_contracts_1.getSampleContractFile)());
    const testFilePath = path.join(testDirPath, exports.sampleTestFileName);
    fs.writeFileSync(testFilePath, (0, sample_contracts_1.getSampleFoundryTestFile)(testDirPath, scriptDirPath));
    fs.writeFileSync('.gitignore', sample_foundry_config_1.sampleGitIgnoreFile);
    fs.writeFileSync('foundry.toml', (0, sample_foundry_config_1.fetchForgeConfig)(true));
    fs.writeFileSync('.env', (0, sample_foundry_config_1.fetchDotEnvFile)(sphinxApiKey, alchemyApiKey));
    spinner.succeed('Initialized sample Sphinx project.');
    await (0, install_1.handleInstall)(spinner);
    await handleCommit();
};
exports.init = init;
//# sourceMappingURL=index.js.map
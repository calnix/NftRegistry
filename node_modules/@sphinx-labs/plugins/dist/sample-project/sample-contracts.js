"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSampleFoundryTestFile = exports.getSampleScriptFile = exports.getSampleContractFile = void 0;
const path_1 = require("path");
const getSampleContractFile = () => {
    return `// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract HelloSphinx {
    string public greeting;
    uint public number;

    constructor(string memory _greeting, uint _number) {
        greeting = _greeting;
        number = _number;
    }

    function add(uint256 _myNum) public {
        number += _myNum;
    }
  }
`;
};
exports.getSampleContractFile = getSampleContractFile;
const getSampleScriptFile = (owner, orgId, scriptDirPath, srcDirPath) => {
    const relativeSrcPath = (0, path_1.relative)(scriptDirPath, srcDirPath);
    return `// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import { HelloSphinx } from "${relativeSrcPath}/HelloSphinx.sol";
import "@sphinx-labs/contracts/SphinxPlugin.sol";

contract HelloSphinxScript is Sphinx {
    HelloSphinx helloSphinx;

    function configureSphinx() public override {
        sphinxConfig.owners = [${owner}];
        sphinxConfig.orgId = "${orgId}";
        sphinxConfig.threshold = 1;
        sphinxConfig.projectName = "My_First_Project";
    }

    function run() public sphinx {
        // Set the \`CREATE2\` salt to be the hash of the owner(s). Prevents
        // address collisions.
        bytes32 salt = keccak256(abi.encode(sphinxConfig.owners));
        helloSphinx = new HelloSphinx{ salt: salt }("Hi", 2);
        helloSphinx.add(8);
    }
}
`;
};
exports.getSampleScriptFile = getSampleScriptFile;
const getSampleFoundryTestFile = (testDirPath, scriptDirPath) => {
    const relativeScriptPath = (0, path_1.relative)(testDirPath, scriptDirPath);
    return `// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "forge-std/Test.sol";
import { HelloSphinxScript } from "${relativeScriptPath}/HelloSphinx.s.sol";

contract HelloSphinxTest is Test, HelloSphinxScript {
    function setUp() public {
        run();
    }

    function testDidDeploy() public {
        assertEq(helloSphinx.greeting(), "Hi");
        assertEq(helloSphinx.number(), 10);
    }

    function testAdd() public {
        helloSphinx.add(1);
        assertEq(helloSphinx.number(), 11);
    }
}
`;
};
exports.getSampleFoundryTestFile = getSampleFoundryTestFile;
//# sourceMappingURL=sample-contracts.js.map
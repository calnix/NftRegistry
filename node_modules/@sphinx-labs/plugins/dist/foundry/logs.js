"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPrettyWarnings = exports.getEncodedFailure = exports.validationStderrWrite = void 0;
const ethers_1 = require("ethers");
let validationWarnings = '';
let validationErrors = '';
const validationStderrWrite = (message) => {
    if (message.startsWith('\nWarning: ')) {
        validationWarnings += message.replace('\n', '');
    }
    else if (message.startsWith('\nError: ')) {
        validationErrors += message.replace('\nError: ', '');
    }
    else {
        validationErrors += message;
    }
    return true;
};
exports.validationStderrWrite = validationStderrWrite;
const getEncodedFailure = (err) => {
    const prettyWarnings = (0, exports.getPrettyWarnings)();
    let prettyError;
    if (err.name === 'ValidationError' && err.message === '') {
        prettyError = validationErrors.endsWith('\n\n')
            ? validationErrors.substring(0, validationErrors.length - 2)
            : validationErrors;
    }
    else {
        const errorMessage = err.stack ?? `${err.name}: ${err.message}`;
        prettyError = errorMessage.startsWith('Error: ')
            ? errorMessage.substring(7)
            : errorMessage;
    }
    const coder = ethers_1.AbiCoder.defaultAbiCoder();
    const encodedErrorsAndWarnings = coder.encode(['string', 'string'], [prettyError, prettyWarnings]);
    const encodedFailure = (0, ethers_1.concat)([
        encodedErrorsAndWarnings,
        coder.encode(['bool'], [false]),
    ]);
    return encodedFailure;
};
exports.getEncodedFailure = getEncodedFailure;
const getPrettyWarnings = () => {
    return validationWarnings.endsWith('\n\n')
        ? validationWarnings.substring(0, validationWarnings.length - 1)
        : validationWarnings;
};
exports.getPrettyWarnings = getPrettyWarnings;
//# sourceMappingURL=logs.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFoundryToml = exports.checkRequiredTomlOptions = exports.resolvePaths = exports.cleanPath = void 0;
const path_1 = require("path");
const fs_1 = require("fs");
const core_1 = require("@sphinx-labs/core");
const utils_1 = require("./utils");
const cleanPath = (dirtyPath) => {
    let cleanQuotes = dirtyPath.replace(/'/g, '');
    cleanQuotes = cleanQuotes.replace(/"/g, '');
    return cleanQuotes.trim();
};
exports.cleanPath = cleanPath;
const resolvePaths = (outPath, buildInfoPath) => {
    const artifactFolder = (0, path_1.resolve)(outPath);
    const buildInfoFolder = (0, path_1.resolve)(buildInfoPath);
    const deploymentFolder = (0, path_1.resolve)('deployments');
    return {
        artifactFolder,
        buildInfoFolder,
        deploymentFolder,
    };
};
exports.resolvePaths = resolvePaths;
const checkRequiredTomlOptions = (toml) => {
    if (!toml.extraOutput.includes('storageLayout')) {
        throw new Error("Missing required extra_output option in foundry.toml file:\nextra_output = ['storageLayout']\nPlease update your foundry.toml file and try again.");
    }
};
exports.checkRequiredTomlOptions = checkRequiredTomlOptions;
const getFoundryToml = async () => {
    const { stdout, stderr, code } = await (0, core_1.spawnAsync)('forge', [
        'config',
        '--json',
    ]);
    if (code !== 0) {
        console.log(stderr);
        process.exit(1);
    }
    const raw = JSON.parse(stdout);
    const buildInfoPath = raw.build_info_path ?? (0, path_1.join)(raw.out, 'build-info');
    const parsed = (0, utils_1.replaceEnvVariables)(raw);
    const remappings = {};
    for (const remapping of parsed.remappings) {
        const [from, to] = remapping.split('=');
        remappings[from] = to;
    }
    const { broadcast: broadcastFolder, etherscan, cache_path: cachePath, rpc_endpoints: rpcEndpoints, src, test, script, solc, always_use_create_2_factory, build_info, extra_output, } = parsed;
    const resolved = {
        ...(0, exports.resolvePaths)(parsed.out, buildInfoPath),
        cachePath,
        rpcEndpoints,
        src,
        test,
        script,
        solc,
        remappings,
        etherscan,
        broadcastFolder,
        alwaysUseCreate2Factory: always_use_create_2_factory,
        buildInfo: build_info,
        extraOutput: extra_output,
    };
    if (!(0, fs_1.existsSync)(cachePath)) {
        (0, fs_1.mkdirSync)(cachePath, { recursive: true });
    }
    (0, exports.checkRequiredTomlOptions)(resolved);
    return resolved;
};
exports.getFoundryToml = getFoundryToml;
//# sourceMappingURL=options.js.map
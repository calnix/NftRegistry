"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRpcRequestStalledErrorMessage = exports.HardhatResetNotAllowedErrorMessage = exports.SigCalledWithNoArgsErrorMessage = exports.InvalidFirstSigArgumentErrorMessage = exports.SphinxConfigTestnetsContainsMainnetsErrorMessage = exports.SphinxConfigMainnetsContainsTestnetsErrorMessage = exports.getMixedNetworkTypeErrorMessage = exports.getLocalNetworkErrorMessage = exports.getUnsupportedNetworkErrorMessage = exports.getFailedRequestErrorMessage = exports.getMissingEndpointErrorMessage = void 0;
const getMissingEndpointErrorMessage = (networks) => `The following networks are missing an RPC endpoint in your foundry.toml:\n` +
    networks.map((network) => `- ${network}`).join('\n');
exports.getMissingEndpointErrorMessage = getMissingEndpointErrorMessage;
const getFailedRequestErrorMessage = (networks) => `Failed to make a request to the following networks in your foundry.toml. Please \n` +
    `check that you've correctly defined the RPC endpoint for these networks:\n` +
    networks.map((network) => `- ${network}`).join('\n');
exports.getFailedRequestErrorMessage = getFailedRequestErrorMessage;
const getUnsupportedNetworkErrorMessage = (unsupported) => `The following networks are not supported by Sphinx's DevOps Platform. If you think this is\n` +
    `a mistake, check that the chain ID matches the network name. If it doesn't match, you're\n` +
    `using the wrong RPC URL for this network.\n` +
    unsupported
        .map(({ networkName, chainId }) => `- ${networkName}, chain ID: ${chainId}`)
        .join('\n');
exports.getUnsupportedNetworkErrorMessage = getUnsupportedNetworkErrorMessage;
const getLocalNetworkErrorMessage = (networks) => `The following networks are local networks. You can only propose on live networks.\n` +
    networks.map((network) => `- ${network}`).join('\n');
exports.getLocalNetworkErrorMessage = getLocalNetworkErrorMessage;
const getMixedNetworkTypeErrorMessage = (networks) => `Detected a mix of test networks and production networks in the proposal. Proposals\n` +
    `must either contain test networks or production networks, but not both.\n` +
    networks
        .map(({ networkType, network }) => `- ${network}: ${networkType}`)
        .join(`\n`);
exports.getMixedNetworkTypeErrorMessage = getMixedNetworkTypeErrorMessage;
exports.SphinxConfigMainnetsContainsTestnetsErrorMessage = `Your 'sphinxConfig.mainnets' array contains all test networks. Please put these networks\n` +
    `in 'sphinxConfig.testnets' instead.`;
exports.SphinxConfigTestnetsContainsMainnetsErrorMessage = `Your 'sphinxConfig.testnets' array contains all production networks. Please put these networks\n` +
    `in 'sphinxConfig.mainnets' instead.`;
exports.InvalidFirstSigArgumentErrorMessage = `The first argument passed to --sig is invalid. If you're passing in a function, make sure\n` +
    `it includes parenthesis, e.g. 'run()'. If you're passing in raw calldata, make sure it's\n` +
    `a valid hex string.`;
exports.SigCalledWithNoArgsErrorMessage = `Expected at least one argument passed to --sig, but none were supplied.`;
exports.HardhatResetNotAllowedErrorMessage = `Calling 'hardhat_reset' is not allowed.`;
const getRpcRequestStalledErrorMessage = (ms) => `RPC request stalled for ${ms / 1000} seconds. Please check that your RPC provider is functional, and\n` +
    `consider switching if it isn't.`;
exports.getRpcRequestStalledErrorMessage = getRpcRequestStalledErrorMessage;
//# sourceMappingURL=error-messages.js.map
{"version":3,"file":"transport.js","sourceRoot":"","sources":["../src/transport.ts"],"names":[],"mappings":"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","sourcesContent":["import stream  from 'stream';\nimport split from 'split2';\nimport pump from 'pumpify';\nimport through from 'through2';\nimport * as Sentry from '@sentry/node';\n\ntype ValueOf<T> = T extends any[] ? T[number] : T[keyof T]\n\nclass ExtendedError extends Error {\n  public constructor(info: any) {\n    super(info.message);\n\n    this.name = \"Error\";\n    this.stack = info.stack || null;\n  }\n}\n\nconst SEVERITIES_MAP = {\n  10: Sentry.Severity.Debug,   // pino: trace\n  20: Sentry.Severity.Debug,   // pino: debug\n  30: Sentry.Severity.Info,    // pino: info\n  40: Sentry.Severity.Warning, // pino: warn\n  50: Sentry.Severity.Error,   // pino: error\n  60: Sentry.Severity.Fatal,   // pino: fatal\n  // Support for useLevelLabels\n  // https://github.com/pinojs/pino/blob/master/docs/api.md#uselevellabels-boolean\n  trace: Sentry.Severity.Debug,\n  debug: Sentry.Severity.Debug,\n  info: Sentry.Severity.Info,\n  warning: Sentry.Severity.Warning,\n  error: Sentry.Severity.Error,\n  fatal: Sentry.Severity.Fatal,\n} as const;\n\n// How severe the Severity is\nconst SeverityIota  = {\n  [Sentry.Severity.Debug]: 1,\n  [Sentry.Severity.Log]: 2,\n  [Sentry.Severity.Info]: 3,\n  [Sentry.Severity.Warning]: 4,\n  [Sentry.Severity.Error]: 5,\n  [Sentry.Severity.Fatal]: 6,\n  [Sentry.Severity.Critical]: 7,\n} as const;\n\ninterface PinoSentryOptions extends Sentry.NodeOptions {\n  /** Minimum level for a log to be reported to Sentry from pino-sentry */\n  level?: keyof typeof SeverityIota;\n  messageAttributeKey?: string;\n  extraAttributeKeys?: string[];\n  stackAttributeKey?: string;\n  maxValueLength?: number;\n}\n\nexport class PinoSentryTransport {\n  // Default minimum log level to `debug`\n  minimumLogLevel: ValueOf<typeof SeverityIota> = SeverityIota[Sentry.Severity.Debug]\n  messageAttributeKey = 'msg';\n  extraAttributeKeys = ['extra'];\n  stackAttributeKey = 'stack';\n  maxValueLength = 250;\n\n  public constructor(options?: PinoSentryOptions) {\n    Sentry.init(this.validateOptions(options || {}));\n  }\n\n  public getLogSeverity(level: keyof typeof SEVERITIES_MAP): Sentry.Severity {\n    return SEVERITIES_MAP[level] || Sentry.Severity.Info;\n  }\n\n  public get sentry() {\n    return Sentry;\n  }\n\n  public transformer(): stream.Transform {\n    return through.obj((chunk: any, _enc: any, cb: any) => {\n      this.prepareAndGo(chunk, cb);\n    });\n  }\n\n  public prepareAndGo(chunk: any, cb: any): void {\n    const severity = this.getLogSeverity(chunk.level);\n    // Check if we send this Severity to Sentry\n    if (this.shouldLog(severity) === false) {\n      setImmediate(cb);\n      return;\n    };\n\n    const tags = chunk.tags || {};\n\n    if (chunk.reqId) {\n      tags.uuid = chunk.reqId;\n    }\n\n    if (chunk.responseTime) {\n      tags.responseTime = chunk.responseTime;\n    }\n\n    if (chunk.hostname) {\n      tags.hostname = chunk.hostname;\n    }\n\n    const extra: any = {};\n    this.extraAttributeKeys.forEach((key: string) => {\n      if(chunk[key] !== undefined) {\n        extra[key] = chunk[key];\n      }\n    });\n    const message = chunk[this.messageAttributeKey];\n    const stack = chunk[this.stackAttributeKey] || '';\n\n    Sentry.configureScope(scope => {\n      if (this.isObject(tags)) {\n        Object.keys(tags).forEach(tag => scope.setTag(tag, tags[tag]));\n      }\n      if (this.isObject(extra)) {\n        Object.keys(extra).forEach(ext => scope.setExtra(ext, extra[ext]));\n      }\n    });\n\n    // Capturing Errors / Exceptions\n    if (this.isSentryException(severity)) {\n      const error = message instanceof Error ? message : new ExtendedError({ message, stack });\n\n      setImmediate(() => {\n        Sentry.captureException(error);\n        cb();\n      });\n    } else {\n      // Capturing Messages\n      setImmediate(() => {\n        Sentry.captureMessage(message, severity);\n        cb();\n      });\n    }\n  }\n\n  private validateOptions(options: PinoSentryOptions): PinoSentryOptions {\n    const dsn = options.dsn || process.env.SENTRY_DSN;\n    if (!dsn) {\n      console.log('Warning: [pino-sentry] Sentry DSN must be supplied, otherwise logs will not be reported. Pass via options or `SENTRY_DSN` environment variable.');\n    }\n    if (options.level) {\n      const allowedLevels = Object.keys(SeverityIota);\n      if (allowedLevels.includes(options.level) === false)  {\n        throw new Error(`[pino-sentry] Option \\`level\\` must be one of: ${allowedLevels.join(', ')}. Received: ${options.level}`);\n      }\n      // Set minimum log level\n      this.minimumLogLevel = SeverityIota[options.level];\n    }\n\n    this.stackAttributeKey = options.stackAttributeKey ?? this.stackAttributeKey;\n    this.extraAttributeKeys = options.extraAttributeKeys ?? this.extraAttributeKeys;\n    this.messageAttributeKey = options.messageAttributeKey ?? this.messageAttributeKey;\n    this.maxValueLength = options.maxValueLength ?? this.maxValueLength;\n\n    return {\n      dsn,\n      // npm_package_name will be available if ran with\n      // from a \"script\" field in package.json.\n      serverName: process.env.npm_package_name || 'pino-sentry',\n      environment: process.env.SENTRY_ENVIRONMENT || process.env.NODE_ENV || 'production',\n      debug: !!process.env.SENTRY_DEBUG || false,\n      sampleRate: 1.0,\n      maxBreadcrumbs: 100,\n      ...options,\n    };\n  }\n\n  private isObject(obj: any): boolean {\n    const type = typeof obj;\n    return type === 'function' || type === 'object' && !!obj;\n  }\n\n  private isSentryException(level: Sentry.Severity): boolean {\n    return level === Sentry.Severity.Fatal || level === Sentry.Severity.Error;\n  }\n\n  private shouldLog(severity: Sentry.Severity): boolean {\n    const logLevel = SeverityIota[severity];\n    return logLevel >= this.minimumLogLevel;\n  }\n};\n\nexport function createWriteStream(options?: PinoSentryOptions): stream.Duplex {\n  const transport = new PinoSentryTransport(options);\n  const sentryTransformer = transport.transformer();\n\n  return new pump(\n    split((line) => {\n      try {\n        return JSON.parse(line);\n      } catch (e) {\n        // Returning undefined will not run the sentryTransformer\n        return;\n      }\n    }),\n    sentryTransformer\n  );\n};\n\n// Duplicate to not break API\nexport const createWriteStreamAsync = createWriteStream;\n"]}